/*
 *  Copyright (c) 2011-2014 Qredo Ltd.  Strictly confidential.  All rights reserved.
 */

#import <UIKit/UIKit.h>
#import <XCTest/XCTest.h>
#import "QredoRendezvousCrypto.h"
#import "QredoCrypto.h"
#import "CryptoImpl.h"
#import "CryptoImplV1.h"

@interface QredoRendezvousCryptoTest : XCTestCase

@end

@implementation QredoRendezvousCryptoTest


- (void)testHashedTag
{
    NSString *tag = @"q5";
    const unsigned char hashedTagBytes[] = {
        0x20, 0x43, 0xd5, 0xc0, 0x92, 0x63, 0x5e, 0x61, 0x41, 0x00, 0x8a, 0xc9,
        0x50, 0x68, 0x59, 0x0e, 0xf9, 0x01, 0x28, 0xa0, 0xf9, 0x29, 0xa9, 0xda,
        0xaa, 0x67, 0x59, 0xa1, 0x2e, 0xef, 0x15, 0x9c};


    const unsigned char authKeyBytes[] = {
        0x9d, 0x8a, 0xd8, 0xa2, 0x65, 0x9b, 0xae, 0x74, 0x09, 0xde, 0x61, 0x0d,
        0xff, 0x4b, 0x37, 0xa2, 0xc8, 0x7f, 0xc3, 0xed, 0xc9, 0x8e, 0xb0, 0x49,
        0xcf, 0xd9, 0x22, 0x07, 0xe2, 0x7d, 0x08, 0x83
    };

    QredoRendezvousHashedTag *expectedHashedTag = [[QredoQUID alloc] initWithQUIDBytes:hashedTagBytes];
    QredoAuthenticationCode *expectedAuthCode = [NSData dataWithBytes:authKeyBytes length:sizeof(authKeyBytes)];

    QredoRendezvousCrypto *crypto = [[QredoRendezvousCrypto alloc] init];


    QredoRendezvousHashedTag *hashedTagFromExpectedAuthKey = [crypto hashedTagWithAuthKey:expectedAuthCode];
    XCTAssertEqualObjects(hashedTagFromExpectedAuthKey, expectedHashedTag);




    NSString *saltString = @"Authenticate";
    NSData *saltData = [saltString dataUsingEncoding:NSASCIIStringEncoding];

    NSString *passwordString = @"q5";
    NSData *passwordData = [passwordString dataUsingEncoding:NSASCIIStringEncoding];

    NSUInteger keyLength = 32;
    NSUInteger iterations = 10000;

    NSData *derivedKey = [QredoCrypto pbkdf2Sha256WithSalt:saltData
                                     bypassSaltLengthCheck:NO
                                              passwordData:passwordData
                                    requiredKeyLengthBytes:keyLength
                                                iterations:iterations];

    XCTAssertTrue([derivedKey isEqualToData:expectedAuthCode]);

    QredoAuthenticationCode *authKey = [crypto authKey:tag];

    XCTAssertTrue([authKey isEqualToData:expectedAuthCode]);

    QredoRendezvousHashedTag *hashedTag = [crypto hashedTag:tag];

    QredoRendezvousHashedTag *hashedTagFromAuthKey = [crypto hashedTagWithAuthKey:authKey];


    XCTAssertEqualObjects(hashedTag, hashedTagFromAuthKey);
    XCTAssertEqualObjects(hashedTag, expectedHashedTag);

    XCTAssertEqualObjects(hashedTagFromAuthKey, expectedHashedTag);
}

- (void)testSimpleAuthCode {
    NSData *sampleData = [@"Hello, world" dataUsingEncoding:NSUTF8StringEncoding];
    NSString *tag = @"a1";

    id<CryptoImpl> _crypto = [CryptoImplV1 new];
    QredoRendezvousCrypto *crypto = [[QredoRendezvousCrypto alloc] init];
    QredoAuthenticationCode *authKey = [crypto authKey:tag];

    NSData *authCode = [_crypto getAuthCodeWithKey:authKey
                                              data:sampleData];

    NSLog(@"Auth code: %@", [authCode description]);
}


- (void)testSimpleAuthCode2 {
    const unsigned char signedCreationInfo[] = {
        0x28, 0x31, 0x3a, 0x43, 0x32, 0x33, 0x3a, 0x27, 0x52, 0x65, 0x6e, 0x64,
        0x65, 0x7a, 0x76, 0x6f, 0x75, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
        0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,

        0x28, 0x32, 0x33, 0x3a, 0x27, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
        0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
        0x4b, 0x65, 0x79, 0x32, 0x35, 0x37, 0x3a, 0x62, 0xb1, 0xa3, 0x92, 0xab,
        0x11, 0xe0, 0xed, 0x7f, 0xcd, 0xf8, 0x73, 0x73, 0xa1, 0x6c, 0x98, 0xe8,
        0x35, 0x93, 0x67, 0x3c, 0x1d, 0x1a, 0xa3, 0x52, 0x28, 0x74, 0x41, 0xa6,
        0x76, 0x2d, 0x50, 0xdb, 0x88, 0xf9, 0xdf, 0xea, 0x0f, 0x7c, 0xf1, 0x79,
        0x03, 0x21, 0xda, 0x72, 0xb9, 0x5d, 0x8d, 0xe9, 0x04, 0xcd, 0x37, 0x70,
        0x06, 0x5f, 0x6e, 0x46, 0x6d, 0x23, 0x39, 0xac, 0xfd, 0x49, 0xe3, 0x9a,
        0xce, 0x76, 0x09, 0x08, 0x57, 0x3c, 0xb0, 0xf2, 0x61, 0xe3, 0xc7, 0x2a,
        0xa4, 0xa4, 0x24, 0xe2, 0x92, 0xe4, 0x9d, 0xc7, 0x00, 0x0c, 0x46, 0xc0,
        0x4d, 0x93, 0xd2, 0xaf, 0x3f, 0xd8, 0xac, 0x8f, 0x88, 0x4d, 0xae, 0x9d,
        0xc6, 0x12, 0xf6, 0xc4, 0x7b, 0x84, 0x3d, 0x3c, 0xae, 0x8f, 0x04, 0x20,
        0xeb, 0x96, 0x30, 0xff, 0x3a, 0xf9, 0xc1, 0x7c, 0xde, 0x9e, 0x69, 0x86,
        0x5d, 0x37, 0x58, 0xa3, 0xf5, 0xd0, 0x44, 0xbc, 0x4d, 0xa9, 0xd2, 0x16,
        0xcb, 0x5b, 0x15, 0xb7, 0x2a, 0xa3, 0xb4, 0xc6, 0x36, 0x0c, 0x35, 0x50,
        0x66, 0xed, 0xc4, 0x34, 0xf1, 0xd8, 0x6b, 0x69, 0x7b, 0xc5, 0x93, 0xac,
        0x75, 0x79, 0x07, 0x9a, 0x88, 0x51, 0x4a, 0x63, 0x20, 0x2a, 0xfa, 0xf7,
        0xfb, 0x5f, 0x29, 0x89, 0x90, 0x13, 0x53, 0xd3, 0xc6, 0x01, 0xd1, 0x4f,
        0x03, 0x65, 0x4d, 0x6d, 0x84, 0x34, 0xc4, 0x15, 0xfb, 0x5f, 0x71, 0x59,
        0xbf, 0x0e, 0xa6, 0x8c, 0x17, 0x02, 0xf7, 0xa5, 0x1d, 0xe6, 0x2f, 0x09,
        0x15, 0xfc, 0xb3, 0x71, 0xe2, 0xfc, 0xc2, 0x4a, 0x48, 0x8d, 0xeb, 0x3c,
        0x75, 0xec, 0xa3, 0x5b, 0x19, 0x0b, 0x98, 0xdd, 0x1a, 0x01, 0x78, 0xd2,
        0x33, 0xbb, 0x56, 0xde, 0x0e, 0x43, 0x62, 0xa2, 0x6b, 0x6e, 0x52, 0xfb,
        0xeb, 0xd9, 0x8e, 0x26, 0x30, 0xfa, 0xe4, 0x60, 0x4c, 0x13, 0x78, 0x73,
        0x29, 0x28, 0x31, 0x39, 0x3a, 0x27, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
        0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
        0x33, 0x33, 0x3a, 0x62, 0x37, 0x06, 0x8c, 0xfb, 0xe0, 0xae, 0x03, 0x45,
        0x7f, 0x55, 0x4c, 0x3f, 0x0e, 0xc2, 0xa9, 0xb0, 0x08, 0x95, 0xf5, 0x1a,
        0xb4, 0xda, 0x27, 0x95, 0x9d, 0xbc, 0x56, 0x49, 0xea, 0x90, 0x7f, 0xa9,
        0x29, 0x28, 0x31, 0x37, 0x3a, 0x27, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
        0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x32, 0x30,
        0x3a, 0x53, 0x63, 0x6f, 0x6d, 0x2e, 0x71, 0x72, 0x65, 0x64, 0x6f, 0x2e,
        0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x29, 0x28, 0x31,
        0x36, 0x3a, 0x27, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
        0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x28, 0x31, 0x3a, 0x7b, 0x39, 0x3a,
        0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x58, 0x29, 0x29, 0x28,
        0x31, 0x30, 0x3a, 0x27, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x54, 0x61,
        0x67, 0x33, 0x33, 0x3a, 0x51, 0x04, 0x31, 0x1a, 0xb1, 0x55, 0xeb, 0x93,
        0x99, 0x59, 0x5f, 0x8d, 0xa8, 0x0e, 0xb1, 0xf8, 0x74, 0xb3, 0x9c, 0x08,
        0x99, 0xb2, 0x10, 0xb9, 0xea, 0xe9, 0x3d, 0xad, 0xa3, 0x7a, 0xc1, 0xa2,
        0x34, 0x29, 0x28, 0x31, 0x37, 0x3a, 0x27, 0x6d, 0x61, 0x78, 0x52, 0x65,
        0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x28,
        0x31, 0x3a, 0x7b, 0x39, 0x3a, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0x29, 0x29, 0x28, 0x31, 0x39, 0x3a, 0x27, 0x72, 0x65, 0x71,
        0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
        0x4b, 0x65, 0x79, 0x33, 0x33, 0x3a, 0x62, 0xa8, 0x4c, 0x6d, 0xa9, 0x6d,
        0xd8, 0x8d, 0x77, 0xe9, 0xc6, 0x77, 0x73, 0x7c, 0x44, 0x94, 0x1d, 0x1d,
        0x4c, 0x3e, 0x6b, 0x19, 0xba, 0xb4, 0x5f, 0xfd, 0x79, 0x53, 0xa6, 0xb5,
        0xd0, 0xde, 0x19, 0x29, 0x28, 0x39, 0x3a, 0x27, 0x74, 0x72, 0x61, 0x6e,
        0x73, 0x43, 0x61, 0x70, 0x28, 0x31, 0x3a, 0x7b, 0x29, 0x29, 0x29
        
    };
    NSData *sampleData = [NSData dataWithBytes:signedCreationInfo length:sizeof(signedCreationInfo)];
    NSString *tag = @"a1";

    id<CryptoImpl> _crypto = [CryptoImplV1 new];
    QredoRendezvousCrypto *crypto = [[QredoRendezvousCrypto alloc] init];
    QredoAuthenticationCode *authKey = [crypto authKey:tag];

    NSData *authCode = [_crypto getAuthCodeWithKey:authKey
                                              data:sampleData];

    NSLog(@"Auth code: %@", [authCode description]);
}


@end
