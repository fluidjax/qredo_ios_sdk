/* HEADER GOES HERE */
#import <UIKit/UIKit.h>
#import <XCTest/XCTest.h>
#import "QredoRsaPrivateKey.h"
#import "QredoCrypto.h"
#import "QredoLoggerPrivate.h"

@interface QredoRsaPrivateKeyTests :XCTestCase

@end

@implementation QredoRsaPrivateKeyTests

-(void)setUp {
    [super setUp];
    //Put setup code here. This method is called before the invocation of each test method in the class.
    
    //Must remove any existing keys before starting
    [QredoCrypto deleteAllKeysInAppleKeychain];
}

-(void)tearDown {
    //Put teardown code here. This method is called after the invocation of each test method in the class.
    [super tearDown];
    
    //Must remove any keys after completing
    [QredoCrypto deleteAllKeysInAppleKeychain];
}

-(void)testInitWithPkcs1KeyData {
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x5C,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0xBA,0x47,0x16,0xD7,0x9F,0x8D,0xAC,0x73,0xA7,0xD6,0xEE,0x3E,0x44,0xCB,0x5C,0xCE,0xBB,0xFD,0xDE,0x36,0xD6,0x7F,0x53,0xA5,0xEF,0x67,0x4E,0x79,0x43,0xFF,0x13,0xED,0x63,0xA7,0x9F,0x92,0x4D,0x28,0x4B,0x84,0xC5,0xFE,0xF2,0xB5,0xFA,0x0B,0x16,0x8B,0xEB,0x81,0x1C,0xB2,0x72,0x16,0x50,0x3E,0x18,0x6F,0x8B,0xC7,0xA3,0x12,0x2D,0x78,0x24,0xDF,0x6F,0x0D,0x27,0x4E,0x57,0xF7,0x84,0xB4,0x18,0x5B,0xD7,0x97,0x54,0x59,0x11,0x80,0x9E,0x1C,0x79,0x7C,0xE9,0x44,0x8D,0x26,0xA4,0x2D,0x45,0x84,0x7A,0xB9,0x17,0x71,0xEE,0x06,0x37,0x33,0xA9,0x9E,0x10,0xCD,0x78,0x38,0xEC,0x35,0xB7,0xF8,0x75,0x4A,0x8F,0x91,0x14,0xDD,0xEF,0xDC,0x7A,0x90,0x20,0x3F,0x71,0x7C,0x3D,0x17,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x80,0x41,0x30,0x55,0xAF,0x19,0xF8,0x43,0x8C,0xAA,0x05,0x0E,0x95,0x1E,0x10,0x29,0x27,0x74,0x24,0xB0,0xDA,0x72,0x10,0x57,0x1E,0xAF,0xFC,0x70,0x3B,0x01,0xEF,0xC7,0x72,0x81,0x38,0x8D,0x20,0x6E,0xFE,0x16,0x07,0x9E,0x1E,0xCD,0xA3,0x9F,0xA0,0xB7,0xC0,0x39,0xA7,0x92,0x7A,0x64,0x70,0xA8,0x9E,0x42,0x80,0xEE,0xE2,0xEB,0x8F,0x95,0xF7,0x4C,0x00,0x3C,0x1B,0x68,0x77,0x1F,0xF9,0xFB,0x79,0x42,0xD1,0xD6,0x1E,0x40,0x10,0x0F,0xC1,0x62,0x0F,0x08,0xD7,0x92,0x58,0xAB,0xEA,0x65,0xEB,0xBA,0xF9,0x77,0x50,0x05,0xD3,0x56,0x96,0x9A,0x84,0xE7,0x08,0xEF,0x71,0x87,0xC3,0x2F,0x92,0x50,0xA2,0xCA,0xD2,0xA3,0x3E,0xB7,0xFC,0x7E,0x03,0x2F,0x9D,0x2F,0x68,0xD3,0x2F,0xA2,0x09,0x02,0x41,0x01,0x8B,0xF6,0xB2,0x84,0x64,0xED,0x97,0x16,0x5E,0xF1,0xB5,0xAF,0xF1,0x41,0x4A,0x37,0xFA,0xB2,0xB1,0x4A,0xEA,0x0E,0x75,0xA5,0xF3,0xB5,0x8B,0x51,0x57,0x18,0x00,0x41,0x29,0x29,0xF0,0xE2,0xEA,0x16,0x60,0x15,0x80,0xE0,0x09,0xA1,0xF4,0x41,0xCB,0x2F,0x19,0x20,0x7F,0x68,0xB1,0x3C,0x59,0xD1,0xCE,0xB5,0xF5,0x85,0x39,0x2B,0x08,0xC3,0x02,0x40,0x78,0x6E,0xD8,0xB0,0x4F,0x9A,0xC1,0xDF,0x27,0xD8,0x09,0x51,0x99,0x9B,0x90,0xC5,0xD1,0xD1,0x82,0x98,0xB6,0xA3,0x00,0x08,0xD6,0x0F,0xCC,0xC9,0xED,0xA1,0x09,0x75,0x8A,0x63,0x7C,0xC0,0xE2,0x85,0xE4,0x20,0xF0,0xB2,0x56,0x92,0x82,0xDE,0x86,0x6E,0x15,0x59,0x10,0xC1,0xAC,0x8F,0xAB,0xCF,0xA6,0xA2,0xAB,0x55,0xEC,0x46,0xD5,0x1D,0x02,0x41,0x01,0x0C,0xCD,0x1A,0x7F,0x3A,0x2C,0xF8,0x66,0x5D,0x69,0xE5,0x17,0x5D,0xC6,0x1E,0xE6,0x45,0xB0,0x4D,0x1F,0x38,0x29,0x3C,0xC0,0xBD,0xE3,0x3E,0x82,0xA7,0x87,0x49,0x94,0xF2,0xA6,0xE0,0x3A,0x8B,0x03,0x49,0x93,0x0F,0x7C,0x07,0xCE,0x04,0x0D,0x2E,0x2B,0xF8,0xF8,0xD0,0xC5,0x77,0x9C,0x2A,0xB5,0x7D,0x88,0x94,0xF6,0x2D,0xCB,0x03,0x15,0x02,0x40,0x4A,0x96,0xEC,0xA2,0x16,0x4B,0x95,0x33,0xAF,0x2B,0xC0,0x69,0xC7,0xA7,0x6F,0xFC,0xF5,0x3C,0xBB,0x93,0xF5,0xD9,0xF2,0x95,0x86,0x6E,0xF6,0xB9,0x41,0xF1,0xF1,0x37,0xD9,0x64,0x50,0xC9,0xEE,0x02,0x5B,0x0E,0x83,0xC5,0x10,0x95,0x61,0x74,0x8C,0xF1,0xF5,0x4A,0xDA,0x73,0xF9,0x7A,0x6A,0x41,0x0B,0xC5,0xC8,0x34,0x49,0x48,0x7D,0x89,0x02,0x41,0x01,0x73,0x11,0x03,0xC9,0xA4,0x5B,0x8D,0xCD,0xDC,0xD9,0xD6,0x72,0xDF,0x2B,0xE0,0x30,0xD2,0x36,0x69,0x9D,0xDB,0x1A,0xCE,0xB4,0xA8,0xD5,0x04,0xF4,0x7B,0x4C,0xDD,0x13,0xEA,0x82,0xED,0xED,0xF1,0xC2,0xC9,0xEB,0xEB,0x5F,0x00,0xB5,0x74,0x41,0xC3,0xAE,0x04,0x94,0x25,0x99,0x34,0xB1,0xF3,0x7B,0xD9,0x30,0xBB,0x55,0x73,0x27,0x81,0x1E };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedVersionDataArray[] = { 0x00 };
    NSData *expectedVersionData = [NSData dataWithBytes:expectedVersionDataArray length:sizeof(expectedVersionDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedModulusDataArray[] = { 0x00,0xBA,0x47,0x16,0xD7,0x9F,0x8D,0xAC,0x73,0xA7,0xD6,0xEE,0x3E,0x44,0xCB,0x5C,0xCE,0xBB,0xFD,0xDE,0x36,0xD6,0x7F,0x53,0xA5,0xEF,0x67,0x4E,0x79,0x43,0xFF,0x13,0xED,0x63,0xA7,0x9F,0x92,0x4D,0x28,0x4B,0x84,0xC5,0xFE,0xF2,0xB5,0xFA,0x0B,0x16,0x8B,0xEB,0x81,0x1C,0xB2,0x72,0x16,0x50,0x3E,0x18,0x6F,0x8B,0xC7,0xA3,0x12,0x2D,0x78,0x24,0xDF,0x6F,0x0D,0x27,0x4E,0x57,0xF7,0x84,0xB4,0x18,0x5B,0xD7,0x97,0x54,0x59,0x11,0x80,0x9E,0x1C,0x79,0x7C,0xE9,0x44,0x8D,0x26,0xA4,0x2D,0x45,0x84,0x7A,0xB9,0x17,0x71,0xEE,0x06,0x37,0x33,0xA9,0x9E,0x10,0xCD,0x78,0x38,0xEC,0x35,0xB7,0xF8,0x75,0x4A,0x8F,0x91,0x14,0xDD,0xEF,0xDC,0x7A,0x90,0x20,0x3F,0x71,0x7C,0x3D,0x17 };
    NSData *expectedModulusData = [NSData dataWithBytes:expectedModulusDataArray length:sizeof(expectedModulusDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedPublicExponentDataArray[] = { 0x01,0x00,0x01 };
    NSData *expectedPublicExponentData = [NSData dataWithBytes:expectedPublicExponentDataArray length:sizeof(expectedPublicExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedPrivateExponentDataArray[] = { 0x41,0x30,0x55,0xAF,0x19,0xF8,0x43,0x8C,0xAA,0x05,0x0E,0x95,0x1E,0x10,0x29,0x27,0x74,0x24,0xB0,0xDA,0x72,0x10,0x57,0x1E,0xAF,0xFC,0x70,0x3B,0x01,0xEF,0xC7,0x72,0x81,0x38,0x8D,0x20,0x6E,0xFE,0x16,0x07,0x9E,0x1E,0xCD,0xA3,0x9F,0xA0,0xB7,0xC0,0x39,0xA7,0x92,0x7A,0x64,0x70,0xA8,0x9E,0x42,0x80,0xEE,0xE2,0xEB,0x8F,0x95,0xF7,0x4C,0x00,0x3C,0x1B,0x68,0x77,0x1F,0xF9,0xFB,0x79,0x42,0xD1,0xD6,0x1E,0x40,0x10,0x0F,0xC1,0x62,0x0F,0x08,0xD7,0x92,0x58,0xAB,0xEA,0x65,0xEB,0xBA,0xF9,0x77,0x50,0x05,0xD3,0x56,0x96,0x9A,0x84,0xE7,0x08,0xEF,0x71,0x87,0xC3,0x2F,0x92,0x50,0xA2,0xCA,0xD2,0xA3,0x3E,0xB7,0xFC,0x7E,0x03,0x2F,0x9D,0x2F,0x68,0xD3,0x2F,0xA2,0x09 };
    NSData *expectedPrivateExponentData = [NSData dataWithBytes:expectedPrivateExponentDataArray length:sizeof(expectedPrivateExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtPrime1DataArray[] = { 0x01,0x8B,0xF6,0xB2,0x84,0x64,0xED,0x97,0x16,0x5E,0xF1,0xB5,0xAF,0xF1,0x41,0x4A,0x37,0xFA,0xB2,0xB1,0x4A,0xEA,0x0E,0x75,0xA5,0xF3,0xB5,0x8B,0x51,0x57,0x18,0x00,0x41,0x29,0x29,0xF0,0xE2,0xEA,0x16,0x60,0x15,0x80,0xE0,0x09,0xA1,0xF4,0x41,0xCB,0x2F,0x19,0x20,0x7F,0x68,0xB1,0x3C,0x59,0xD1,0xCE,0xB5,0xF5,0x85,0x39,0x2B,0x08,0xC3 };
    NSData *expectedCrtPrime1Data = [NSData dataWithBytes:expectedCrtPrime1DataArray length:sizeof(expectedCrtPrime1DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtPrime2DataArray[] = { 0x78,0x6E,0xD8,0xB0,0x4F,0x9A,0xC1,0xDF,0x27,0xD8,0x09,0x51,0x99,0x9B,0x90,0xC5,0xD1,0xD1,0x82,0x98,0xB6,0xA3,0x00,0x08,0xD6,0x0F,0xCC,0xC9,0xED,0xA1,0x09,0x75,0x8A,0x63,0x7C,0xC0,0xE2,0x85,0xE4,0x20,0xF0,0xB2,0x56,0x92,0x82,0xDE,0x86,0x6E,0x15,0x59,0x10,0xC1,0xAC,0x8F,0xAB,0xCF,0xA6,0xA2,0xAB,0x55,0xEC,0x46,0xD5,0x1D };
    NSData *expectedCrtPrime2Data = [NSData dataWithBytes:expectedCrtPrime2DataArray length:sizeof(expectedCrtPrime2DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtExponent1DataArray[] = { 0x01,0x0C,0xCD,0x1A,0x7F,0x3A,0x2C,0xF8,0x66,0x5D,0x69,0xE5,0x17,0x5D,0xC6,0x1E,0xE6,0x45,0xB0,0x4D,0x1F,0x38,0x29,0x3C,0xC0,0xBD,0xE3,0x3E,0x82,0xA7,0x87,0x49,0x94,0xF2,0xA6,0xE0,0x3A,0x8B,0x03,0x49,0x93,0x0F,0x7C,0x07,0xCE,0x04,0x0D,0x2E,0x2B,0xF8,0xF8,0xD0,0xC5,0x77,0x9C,0x2A,0xB5,0x7D,0x88,0x94,0xF6,0x2D,0xCB,0x03,0x15 };
    NSData *expectedCrtExponent1Data = [NSData dataWithBytes:expectedCrtExponent1DataArray length:sizeof(expectedCrtExponent1DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtExponent2DataArray[] = { 0x4A,0x96,0xEC,0xA2,0x16,0x4B,0x95,0x33,0xAF,0x2B,0xC0,0x69,0xC7,0xA7,0x6F,0xFC,0xF5,0x3C,0xBB,0x93,0xF5,0xD9,0xF2,0x95,0x86,0x6E,0xF6,0xB9,0x41,0xF1,0xF1,0x37,0xD9,0x64,0x50,0xC9,0xEE,0x02,0x5B,0x0E,0x83,0xC5,0x10,0x95,0x61,0x74,0x8C,0xF1,0xF5,0x4A,0xDA,0x73,0xF9,0x7A,0x6A,0x41,0x0B,0xC5,0xC8,0x34,0x49,0x48,0x7D,0x89 };
    NSData *expectedCrtExponent2Data = [NSData dataWithBytes:expectedCrtExponent2DataArray length:sizeof(expectedCrtExponent2DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtCoefficientDataArray[] = { 0x01,0x73,0x11,0x03,0xC9,0xA4,0x5B,0x8D,0xCD,0xDC,0xD9,0xD6,0x72,0xDF,0x2B,0xE0,0x30,0xD2,0x36,0x69,0x9D,0xDB,0x1A,0xCE,0xB4,0xA8,0xD5,0x04,0xF4,0x7B,0x4C,0xDD,0x13,0xEA,0x82,0xED,0xED,0xF1,0xC2,0xC9,0xEB,0xEB,0x5F,0x00,0xB5,0x74,0x41,0xC3,0xAE,0x04,0x94,0x25,0x99,0x34,0xB1,0xF3,0x7B,0xD9,0x30,0xBB,0x55,0x73,0x27,0x81,0x1E };
    NSData *expectedCrtCoefficientData = [NSData dataWithBytes:expectedCrtCoefficientDataArray length:sizeof(expectedCrtCoefficientDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertTrue([privateKey.version isEqualToData:expectedVersionData],@"Version is incorrect.");
    XCTAssertTrue([privateKey.modulus isEqualToData:expectedModulusData],@"Modulus is incorrect.");
    XCTAssertTrue([privateKey.publicExponent isEqualToData:expectedPublicExponentData],@"Public exponent is incorrect.");
    XCTAssertTrue([privateKey.privateExponent isEqualToData:expectedPrivateExponentData],@"Private exponent is incorrect.");
    XCTAssertTrue([privateKey.crtPrime1 isEqualToData:expectedCrtPrime1Data],@"CRT Prime1 is incorrect.");
    XCTAssertTrue([privateKey.crtPrime2 isEqualToData:expectedCrtPrime2Data],@"CRT Prime2 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent1 isEqualToData:expectedCrtExponent1Data],@"CRT Exponent1 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent2 isEqualToData:expectedCrtExponent2Data],@"CRT Exponent2 is incorrect.");
    XCTAssertTrue([privateKey.crtCoefficient isEqualToData:expectedCrtCoefficientData],@"CRT Coefficient is incorrect.");
}

-(void)testInitWithPkcs1KeyData_GeneratedKeyData {
    NSString *publicKeyIdentifier = @"com.qredo.TestPublicKeyExport1";
    NSString *privateKeyIdentifier = @"com.qredo.TestPrivateKeyExport1";
    NSInteger keySizeBits = 1024;
    QredoSecKeyRefPair *keyPairRef = [QredoCrypto generateRsaKeyPairOfLength:keySizeBits
                                                         publicKeyIdentifier:publicKeyIdentifier
                                                        privateKeyIdentifier:privateKeyIdentifier
                                                      persistInAppleKeychain:YES];
    
    XCTAssertNotNil(keyPairRef,"RSA key generation failed (nil object returned).");
    XCTAssertNotNil((__bridge id)keyPairRef.publicKeyRef,"RSA key generation failed (nil public key ref returned).");
    XCTAssertNotNil((__bridge id)keyPairRef.publicKeyRef,"RSA key generation failed (nil private key ref returned).");
    
    NSData *keyData = [QredoCrypto getKeyDataForIdentifier:privateKeyIdentifier];
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertNotNil(privateKey.version,@"Version should not be nil.");
    XCTAssertNotNil(privateKey.modulus,@"Modulus should not be nil.");
    XCTAssertNotNil(privateKey.publicExponent,@"Public exponent should not be nil.");
    XCTAssertNotNil(privateKey.privateExponent,@"Private exponent should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime1,@"CRT Prime 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime2,@"CRT Prime 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent1,@"CRT Exponent 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent2,@"CRT Exponent 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtCoefficient,@"CRT Coefficient should not be nil.");
}

-(void)testInitWithPkcs1KeyData_ManualKeyData {
    uint8_t expectedVersionDataArray[] = { 0x00 };
    NSData *expectedVersionData = [NSData dataWithBytes:expectedVersionDataArray length:sizeof(expectedVersionDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedModulusDataArray[] = { 0x00,0xCD,0x85,0xBE,0xB0,0xF8,0x45,0x2D,0xD7,0xCF,0x02,0x87,0x10,0x28,0xE0,0x94,0x8D,0x94,0x97,0xD4,0x4B,0x66,0xEF,0x6F,0xF0,0x09,0xCC,0xBC,0x40,0x17,0x32,0xBB,0x2E,0xE7,0x48,0xE4,0x12,0x8C,0x93,0x0A,0x47,0xF0,0xA7,0xFB,0x2A,0x69,0xCB,0xF5,0x6F,0x48,0x0A,0x1E,0xBE,0x73,0xEE,0xC6,0xB4,0x18,0xC0,0x2C,0xAD,0x99,0x27,0x40,0x77,0x66,0x6A,0xA9,0xF8,0xF9,0x8C,0xE2,0x0B,0xF2,0x08,0xDB,0x0F,0xBB,0xAA,0x42,0xA6,0x57,0xA7,0x59,0x73,0xB4,0xE8,0x23,0x7D,0x50,0x23,0x87,0x74,0x3F,0x1F,0xCC,0x65,0xAA,0xA2,0xC4,0x9D,0xE0,0xCE,0x72,0x1D,0x90,0x67,0xE7,0x87,0xAA,0xC2,0xEC,0xE2,0x3B,0xF8,0x02,0xAF,0x14,0x40,0xC8,0xDC,0x0D,0x17,0xCE,0x10,0xEE,0xA0,0xD5,0x8B };
    NSData *expectedModulusData = [NSData dataWithBytes:expectedModulusDataArray length:sizeof(expectedModulusDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedPublicExponentDataArray[] = { 0x01,0x00,0x01 };
    NSData *expectedPublicExponentData = [NSData dataWithBytes:expectedPublicExponentDataArray length:sizeof(expectedPublicExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedPrivateExponentDataArray[] = { 0x00,0xA9,0x2F,0x96,0x81,0x1C,0x7F,0xE6,0x73,0x27,0x88,0x8F,0x22,0xF0,0x63,0xA0,0x26,0xC4,0xD2,0x10,0x03,0x5A,0x63,0x75,0x24,0x87,0x0C,0xB1,0x53,0x99,0x45,0x3B,0xEE,0x2A,0x9B,0x48,0x95,0x34,0x7F,0xBF,0x10,0xE5,0xBD,0x82,0xF7,0xB1,0x4C,0x23,0x69,0x4E,0x46,0x76,0x74,0x95,0xFF,0x54,0x37,0xE1,0xC0,0x21,0x87,0x6E,0xF2,0x6F,0x0F,0x74,0x48,0xEA,0xB7,0x7A,0x69,0xDC,0x88,0x1B,0xE7,0xBB,0x2A,0xE6,0x7F,0x52,0x8A,0xBD,0xB4,0xC0,0xBA,0x42,0xEE,0xB4,0x8F,0xF7,0xA8,0x47,0xEE,0x12,0xF9,0x4F,0xF2,0xE6,0x32,0x7F,0xA9,0xE5,0xAD,0x3A,0xD6,0xBF,0x06,0xE6,0x3D,0x2C,0xD1,0x0D,0x93,0x71,0xE4,0xED,0xA1,0xAB,0x90,0x89,0x92,0x4E,0x4D,0x05,0x55,0x7D,0x96,0x39,0x71 };
    NSData *expectedPrivateExponentData = [NSData dataWithBytes:expectedPrivateExponentDataArray length:sizeof(expectedPrivateExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtPrime1DataArray[] = { 0x01,0xE3,0x00,0x6D,0xF9,0x3E,0x5F,0xB6,0xE8,0x00,0xFC,0x74,0x1F,0x80,0x3D,0x3D,0xCF,0xAF,0xAD,0x85,0xA7,0x6E,0xEF,0xDD,0x80,0x9E,0x21,0x9D,0xB7,0x29,0xCF,0xAB,0x3F,0x9C,0x4D,0x84,0x45,0x2E,0xE9,0x43,0x18,0xDB,0xAD,0x86,0x79,0xFF,0xDF,0xAF,0xBE,0xC1,0x73,0x3E,0xCA,0xB0,0x28,0xA9,0xB9,0x3D,0x98,0xE8,0x44,0xA5,0x1F,0x54,0xD7 };
    NSData *expectedCrtPrime1Data = [NSData dataWithBytes:expectedCrtPrime1DataArray length:sizeof(expectedCrtPrime1DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtPrime2DataArray[] = { 0x6C,0xEE,0x46,0xF7,0xC3,0x72,0x12,0xA7,0xD8,0x42,0xB8,0x24,0xC5,0x97,0xF7,0x88,0x68,0x5F,0xDF,0xC7,0x82,0xC4,0xF6,0x3F,0x25,0x29,0x45,0x69,0xB4,0xFA,0xEE,0x53,0xC7,0x87,0x6A,0xE6,0x21,0xAA,0x91,0xBE,0xEA,0x48,0x87,0x20,0xC4,0x34,0xE4,0x27,0xCC,0x96,0xB4,0x3D,0x67,0x6F,0x0E,0x7C,0x6D,0x80,0x9B,0x8D,0x9E,0x57,0x3A,0x6D };
    NSData *expectedCrtPrime2Data = [NSData dataWithBytes:expectedCrtPrime2DataArray length:sizeof(expectedCrtPrime2DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtExponent1DataArray[] = { 0x00,0xF4,0x2C,0x24,0x6C,0x6B,0x2E,0xE1,0xFD,0x79,0x7A,0x26,0x8E,0x42,0x3B,0x33,0x83,0x49,0xD1,0x94,0x0E,0xA7,0xD3,0x95,0x0B,0xCF,0x65,0x39,0x20,0xFE,0x7F,0x20,0x98,0x80,0xC0,0xE3,0x4C,0x42,0x41,0xE4,0x0C,0xAE,0x09,0x94,0x41,0x1A,0xAC,0x8F,0x61,0x04,0xD4,0xE8,0xFA,0x78,0x81,0xA6,0x03,0xA2,0x73,0x29,0x80,0x82,0x65,0x4B,0x73 };
    NSData *expectedCrtExponent1Data = [NSData dataWithBytes:expectedCrtExponent1DataArray length:sizeof(expectedCrtExponent1DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtExponent2DataArray[] = { 0x4E,0xA2,0x2F,0x2E,0xB9,0xB2,0xC6,0x0E,0xCD,0xC9,0x53,0xFE,0x8F,0x78,0xE5,0x22,0x5E,0x1E,0x1F,0x7F,0x79,0x41,0xCF,0x74,0xC3,0xD1,0xA8,0x1E,0xE7,0x9B,0x60,0xA1,0xAF,0xDE,0x6C,0x67,0x96,0x13,0xF8,0x43,0xF6,0x01,0xC7,0x31,0xFB,0x11,0x27,0x46,0x27,0xA4,0xFE,0x95,0x78,0xEE,0x2D,0x69,0xDA,0xEE,0x44,0xDC,0x15,0x5A,0x68,0x7D };
    NSData *expectedCrtExponent2Data = [NSData dataWithBytes:expectedCrtExponent2DataArray length:sizeof(expectedCrtExponent2DataArray) / sizeof(uint8_t)];
    
    uint8_t expectedCrtCoefficientDataArray[] = { 0x01,0xC9,0xD7,0x89,0x1B,0xFA,0x62,0xFA,0xF6,0x79,0xBE,0x5E,0x3C,0x53,0x8E,0xFB,0x94,0x4F,0x4E,0x99,0xAD,0x8A,0xB1,0x12,0x50,0x0C,0x21,0x72,0xE8,0xDD,0xF3,0x8D,0x36,0x6D,0x09,0x91,0xBA,0x4B,0x7C,0x12,0x1A,0x42,0x4A,0xAC,0xE3,0x05,0xD7,0x89,0x0F,0x9E,0xA7,0x9D,0x65,0xCF,0x40,0x98,0x4F,0xE5,0xF1,0x4A,0xBF,0x88,0xA0,0x22,0xB1 };
    NSData *expectedCrtCoefficientData = [NSData dataWithBytes:expectedCrtCoefficientDataArray length:sizeof(expectedCrtCoefficientDataArray) / sizeof(uint8_t)];
    
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x5D,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0xCD,0x85,0xBE,0xB0,0xF8,0x45,0x2D,0xD7,0xCF,0x02,0x87,0x10,0x28,0xE0,0x94,0x8D,0x94,0x97,0xD4,0x4B,0x66,0xEF,0x6F,0xF0,0x09,0xCC,0xBC,0x40,0x17,0x32,0xBB,0x2E,0xE7,0x48,0xE4,0x12,0x8C,0x93,0x0A,0x47,0xF0,0xA7,0xFB,0x2A,0x69,0xCB,0xF5,0x6F,0x48,0x0A,0x1E,0xBE,0x73,0xEE,0xC6,0xB4,0x18,0xC0,0x2C,0xAD,0x99,0x27,0x40,0x77,0x66,0x6A,0xA9,0xF8,0xF9,0x8C,0xE2,0x0B,0xF2,0x08,0xDB,0x0F,0xBB,0xAA,0x42,0xA6,0x57,0xA7,0x59,0x73,0xB4,0xE8,0x23,0x7D,0x50,0x23,0x87,0x74,0x3F,0x1F,0xCC,0x65,0xAA,0xA2,0xC4,0x9D,0xE0,0xCE,0x72,0x1D,0x90,0x67,0xE7,0x87,0xAA,0xC2,0xEC,0xE2,0x3B,0xF8,0x02,0xAF,0x14,0x40,0xC8,0xDC,0x0D,0x17,0xCE,0x10,0xEE,0xA0,0xD5,0x8B,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x81,0x00,0xA9,0x2F,0x96,0x81,0x1C,0x7F,0xE6,0x73,0x27,0x88,0x8F,0x22,0xF0,0x63,0xA0,0x26,0xC4,0xD2,0x10,0x03,0x5A,0x63,0x75,0x24,0x87,0x0C,0xB1,0x53,0x99,0x45,0x3B,0xEE,0x2A,0x9B,0x48,0x95,0x34,0x7F,0xBF,0x10,0xE5,0xBD,0x82,0xF7,0xB1,0x4C,0x23,0x69,0x4E,0x46,0x76,0x74,0x95,0xFF,0x54,0x37,0xE1,0xC0,0x21,0x87,0x6E,0xF2,0x6F,0x0F,0x74,0x48,0xEA,0xB7,0x7A,0x69,0xDC,0x88,0x1B,0xE7,0xBB,0x2A,0xE6,0x7F,0x52,0x8A,0xBD,0xB4,0xC0,0xBA,0x42,0xEE,0xB4,0x8F,0xF7,0xA8,0x47,0xEE,0x12,0xF9,0x4F,0xF2,0xE6,0x32,0x7F,0xA9,0xE5,0xAD,0x3A,0xD6,0xBF,0x06,0xE6,0x3D,0x2C,0xD1,0x0D,0x93,0x71,0xE4,0xED,0xA1,0xAB,0x90,0x89,0x92,0x4E,0x4D,0x05,0x55,0x7D,0x96,0x39,0x71,0x02,0x41,0x01,0xE3,0x00,0x6D,0xF9,0x3E,0x5F,0xB6,0xE8,0x00,0xFC,0x74,0x1F,0x80,0x3D,0x3D,0xCF,0xAF,0xAD,0x85,0xA7,0x6E,0xEF,0xDD,0x80,0x9E,0x21,0x9D,0xB7,0x29,0xCF,0xAB,0x3F,0x9C,0x4D,0x84,0x45,0x2E,0xE9,0x43,0x18,0xDB,0xAD,0x86,0x79,0xFF,0xDF,0xAF,0xBE,0xC1,0x73,0x3E,0xCA,0xB0,0x28,0xA9,0xB9,0x3D,0x98,0xE8,0x44,0xA5,0x1F,0x54,0xD7,0x02,0x40,0x6C,0xEE,0x46,0xF7,0xC3,0x72,0x12,0xA7,0xD8,0x42,0xB8,0x24,0xC5,0x97,0xF7,0x88,0x68,0x5F,0xDF,0xC7,0x82,0xC4,0xF6,0x3F,0x25,0x29,0x45,0x69,0xB4,0xFA,0xEE,0x53,0xC7,0x87,0x6A,0xE6,0x21,0xAA,0x91,0xBE,0xEA,0x48,0x87,0x20,0xC4,0x34,0xE4,0x27,0xCC,0x96,0xB4,0x3D,0x67,0x6F,0x0E,0x7C,0x6D,0x80,0x9B,0x8D,0x9E,0x57,0x3A,0x6D,0x02,0x41,0x00,0xF4,0x2C,0x24,0x6C,0x6B,0x2E,0xE1,0xFD,0x79,0x7A,0x26,0x8E,0x42,0x3B,0x33,0x83,0x49,0xD1,0x94,0x0E,0xA7,0xD3,0x95,0x0B,0xCF,0x65,0x39,0x20,0xFE,0x7F,0x20,0x98,0x80,0xC0,0xE3,0x4C,0x42,0x41,0xE4,0x0C,0xAE,0x09,0x94,0x41,0x1A,0xAC,0x8F,0x61,0x04,0xD4,0xE8,0xFA,0x78,0x81,0xA6,0x03,0xA2,0x73,0x29,0x80,0x82,0x65,0x4B,0x73,0x02,0x40,0x4E,0xA2,0x2F,0x2E,0xB9,0xB2,0xC6,0x0E,0xCD,0xC9,0x53,0xFE,0x8F,0x78,0xE5,0x22,0x5E,0x1E,0x1F,0x7F,0x79,0x41,0xCF,0x74,0xC3,0xD1,0xA8,0x1E,0xE7,0x9B,0x60,0xA1,0xAF,0xDE,0x6C,0x67,0x96,0x13,0xF8,0x43,0xF6,0x01,0xC7,0x31,0xFB,0x11,0x27,0x46,0x27,0xA4,0xFE,0x95,0x78,0xEE,0x2D,0x69,0xDA,0xEE,0x44,0xDC,0x15,0x5A,0x68,0x7D,0x02,0x41,0x01,0xC9,0xD7,0x89,0x1B,0xFA,0x62,0xFA,0xF6,0x79,0xBE,0x5E,0x3C,0x53,0x8E,0xFB,0x94,0x4F,0x4E,0x99,0xAD,0x8A,0xB1,0x12,0x50,0x0C,0x21,0x72,0xE8,0xDD,0xF3,0x8D,0x36,0x6D,0x09,0x91,0xBA,0x4B,0x7C,0x12,0x1A,0x42,0x4A,0xAC,0xE3,0x05,0xD7,0x89,0x0F,0x9E,0xA7,0x9D,0x65,0xCF,0x40,0x98,0x4F,0xE5,0xF1,0x4A,0xBF,0x88,0xA0,0x22,0xB1 };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertNotNil(privateKey.version,@"Version should not be nil.");
    XCTAssertNotNil(privateKey.modulus,@"Modulus should not be nil.");
    XCTAssertNotNil(privateKey.publicExponent,@"Public exponent should not be nil.");
    XCTAssertNotNil(privateKey.privateExponent,@"Private exponent should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime1,@"CRT Prime 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime2,@"CRT Prime 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent1,@"CRT Exponent 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent2,@"CRT Exponent 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtCoefficient,@"CRT Coefficient should not be nil.");
    
    XCTAssertTrue([privateKey.version isEqualToData:expectedVersionData],@"Version is incorrect.");
    XCTAssertTrue([privateKey.modulus isEqualToData:expectedModulusData],@"Modulus is incorrect.");
    XCTAssertTrue([privateKey.publicExponent isEqualToData:expectedPublicExponentData],@"Public exponent is incorrect.");
    XCTAssertTrue([privateKey.privateExponent isEqualToData:expectedPrivateExponentData],@"Private exponent is incorrect.");
    XCTAssertTrue([privateKey.crtPrime1 isEqualToData:expectedCrtPrime1Data],@"CRT Prime1 is incorrect.");
    XCTAssertTrue([privateKey.crtPrime2 isEqualToData:expectedCrtPrime2Data],@"CRT Prime2 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent1 isEqualToData:expectedCrtExponent1Data],@"CRT Exponent1 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent2 isEqualToData:expectedCrtExponent2Data],@"CRT Exponent2 is incorrect.");
    XCTAssertTrue([privateKey.crtCoefficient isEqualToData:expectedCrtCoefficientData],@"CRT Coefficient is incorrect.");
}

-(void)testInitWithPkcs1KeyData_ManualKeyDataFromBouncyCastle {
    //Manual key data from Bouncy Castle
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x5B,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0x95,0x65,0xC9,0xBC,0xB8,0xC1,0xEC,0x9A,0xA7,0x1B,0x3B,0x54,0x84,0x30,0x0A,0x8A,0xF1,0xBC,0x78,0x28,0x4C,0x90,0xCB,0xCD,0x61,0x8D,0x38,0xAD,0xEA,0xC3,0xA3,0x4B,0x42,0x89,0xD6,0x65,0x1B,0xF7,0x1C,0x07,0xE9,0x16,0x82,0x1A,0x59,0x8A,0x64,0xC1,0x1F,0x6E,0x3B,0xAB,0x58,0x3A,0xDA,0x04,0xB2,0xA4,0x97,0x4C,0xEE,0x54,0xAE,0xBB,0xEF,0xF5,0xE1,0x9D,0x66,0x82,0x07,0x8C,0x41,0x6C,0xC2,0x30,0x42,0x2A,0xE2,0xD2,0x38,0x32,0x84,0x63,0xCA,0x4A,0xF4,0xF9,0xE8,0x8D,0xBE,0xE5,0x18,0x84,0xC2,0xD0,0x97,0x8E,0xD5,0x4F,0x61,0x73,0x77,0xD4,0x0E,0x1C,0xD2,0x4D,0x2A,0x34,0xCF,0xFA,0x17,0x21,0x04,0xDE,0xF7,0xE3,0x32,0x55,0xDF,0xAB,0x31,0x44,0xD6,0xAE,0x6D,0xA3,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x80,0x24,0x94,0xA2,0xDB,0xF9,0xE5,0x49,0xF8,0xE8,0x37,0xEB,0xC4,0x1B,0x05,0xE4,0x5E,0xF7,0x27,0xED,0xC7,0xF8,0x4F,0x70,0x07,0x9E,0xFE,0x44,0x45,0x99,0x79,0x43,0xCF,0x96,0xC0,0x47,0x65,0xC4,0x7E,0x32,0x37,0xE1,0xA3,0xE8,0x41,0x69,0x71,0x50,0x90,0x55,0x10,0xD9,0xBD,0x6F,0xC2,0x21,0x46,0x0B,0x33,0xEF,0xF4,0x1F,0x5B,0x4E,0xD9,0x47,0x60,0x4D,0xA1,0x67,0xCD,0x82,0xB2,0xA2,0xFE,0x0E,0xF7,0x1D,0x8B,0xD8,0xC8,0xCB,0xE6,0xC7,0x9C,0x53,0xFF,0x82,0x94,0x70,0xF1,0x22,0x2B,0x21,0x88,0xDA,0xD0,0xB4,0x08,0x0F,0x16,0x65,0xDF,0x3A,0x1E,0x45,0x64,0x2C,0xB6,0x51,0xFD,0x49,0xC9,0x4F,0xD4,0x28,0xF7,0x46,0x06,0xFC,0xBA,0x99,0x5D,0x0B,0x01,0x36,0x39,0xCA,0x49,0x02,0x41,0x00,0xDA,0x8C,0xF1,0x6C,0x17,0x0A,0x5E,0x32,0xCD,0x31,0xE8,0xE3,0x05,0x61,0x61,0x65,0x89,0xC8,0x70,0x67,0xAD,0x0D,0x1E,0x13,0xF2,0x88,0x25,0xE4,0x3E,0xDD,0xB0,0x76,0xE5,0x5C,0x31,0xB0,0x62,0xD0,0x8B,0xC9,0xF0,0x9F,0xE2,0x26,0x33,0x81,0x9B,0x0F,0x90,0x84,0xA8,0x42,0x99,0x81,0x60,0x8D,0x9B,0x7A,0xAB,0x87,0x3E,0xEE,0x68,0x97,0x02,0x41,0x00,0xAE,0xFF,0x58,0x25,0xDD,0x77,0xB7,0xA4,0x1E,0xA1,0x55,0x1C,0x79,0xFB,0xE5,0x70,0xC1,0x1E,0x42,0xB5,0xB8,0x22,0x16,0x74,0xD4,0x39,0x54,0xF9,0x94,0x8F,0x4F,0xD7,0x3F,0xED,0xE5,0x2A,0x4C,0x51,0x77,0x28,0xAC,0x5B,0x73,0x68,0x1E,0xFC,0xE9,0xED,0x42,0x8C,0x13,0xAE,0x9E,0x82,0x72,0x90,0x8A,0x63,0x99,0x37,0x1E,0xBE,0xD8,0xD5,0x02,0x40,0x18,0x38,0x6C,0x7C,0xFD,0x24,0xB2,0x01,0xD1,0x49,0xC9,0xB4,0x77,0x21,0x2E,0xA9,0x11,0x16,0xFC,0x96,0x10,0xD0,0x96,0x57,0xC1,0x96,0x23,0x14,0xE3,0x7E,0xB0,0x12,0xCD,0x22,0x65,0x83,0x55,0xC0,0x24,0xED,0xD1,0x53,0xF6,0xBD,0x23,0x12,0x26,0xFC,0x17,0x99,0x0C,0x08,0xAD,0x78,0x70,0x19,0xE1,0x74,0x3B,0xD4,0x36,0x3E,0x37,0xAB,0x02,0x40,0x55,0xA6,0x4C,0x32,0x5C,0x2E,0xD8,0x06,0xCF,0xA7,0x0E,0xCD,0x1D,0x37,0x18,0x99,0x13,0x2C,0x08,0x62,0x80,0x78,0xCE,0x9C,0xE7,0xB2,0x17,0xD0,0xFF,0xD1,0x14,0xB6,0xB9,0x67,0x6A,0x1E,0x45,0xB4,0x29,0xAA,0x12,0x91,0xBF,0xEE,0x5A,0x1C,0x57,0x31,0xF4,0xBC,0x32,0x75,0xE8,0xC6,0xD7,0xE3,0xBE,0x97,0xF8,0xC9,0x6D,0x96,0xE2,0xF1,0x02,0x40,0x09,0x8A,0x43,0x0E,0x23,0xCF,0xC8,0x0E,0xB5,0x50,0x70,0x80,0x33,0x8F,0x26,0xFC,0x0C,0x4A,0x63,0x38,0xAE,0x4A,0x53,0x6E,0xCF,0xC9,0x4E,0x17,0x38,0x36,0x83,0x09,0x81,0xA1,0x0E,0xA7,0xBE,0xFC,0xD2,0x7B,0x00,0x5F,0x3F,0x55,0x10,0x5B,0xDA,0xCC,0x5F,0x7F,0x73,0x1F,0xF6,0xB8,0xF4,0xC9,0x97,0x32,0x0E,0x3A,0x5E,0x49,0x46,0x68 };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertNotNil(privateKey.version,@"Version should not be nil.");
    XCTAssertNotNil(privateKey.modulus,@"Modulus should not be nil.");
    XCTAssertNotNil(privateKey.publicExponent,@"Public exponent should not be nil.");
    XCTAssertNotNil(privateKey.privateExponent,@"Private exponent should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime1,@"CRT Prime 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime2,@"CRT Prime 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent1,@"CRT Exponent 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent2,@"CRT Exponent 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtCoefficient,@"CRT Coefficient should not be nil.");
}

-(void)testInitWithPkcs1KeyData_Fail_PublicKeyData {
    NSString *publicKeyIdentifier = @"com.qredo.TestPublicKeyExport1";
    NSString *privateKeyIdentifier = @"com.qredo.TestPrivateKeyExport1";
    NSInteger keySizeBits = 1024;
    QredoSecKeyRefPair *keyPairRef = [QredoCrypto generateRsaKeyPairOfLength:keySizeBits
                                                         publicKeyIdentifier:publicKeyIdentifier
                                                        privateKeyIdentifier:privateKeyIdentifier
                                                      persistInAppleKeychain:YES];
    
    XCTAssertNotNil(keyPairRef,"RSA key generation failed (nil object returned).");
    XCTAssertNotNil((__bridge id)keyPairRef.publicKeyRef,"RSA key generation failed (nil public key ref returned).");
    XCTAssertNotNil((__bridge id)keyPairRef.publicKeyRef,"RSA key generation failed (nil private key ref returned).");
    
    //Will try to use public key data to initialise a private key - should fail
    NSData *keyData = [QredoCrypto getKeyDataForIdentifier:publicKeyIdentifier];
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    XCTAssertNil(privateKey,@"Private key should be nil.");
}

-(void)testInitWithPkcs8KeyData_KeyDataFromBouncyCastle {
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x77,0x02,0x01,0x00,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x04,0x82,0x02,0x61,0x30,0x82,0x02,0x5D,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0xD3,0x1C,0x61,0x7C,0xCC,0x1F,0x10,0x5C,0x06,0xA1,0xB5,0x77,0x34,0xAB,0x99,0x4E,0x1F,0x5F,0xA5,0x0D,0xFC,0x2C,0x4F,0x76,0x5E,0x58,0x7B,0x82,0xB0,0x76,0xEB,0x58,0x0C,0x7F,0xED,0xE3,0xF1,0xD9,0xD3,0xEB,0x48,0x81,0x70,0x04,0x68,0xEC,0x11,0xB8,0x70,0x79,0xEB,0x51,0xE5,0x09,0x82,0x15,0x57,0x93,0x29,0x83,0x0F,0x30,0xD7,0xD3,0x8A,0x48,0x1F,0x57,0x2D,0xB3,0x75,0xC1,0x40,0xB5,0xB2,0x72,0x14,0xF0,0xE8,0xB6,0x69,0x4D,0x70,0x8D,0x4D,0x12,0x02,0x0A,0x8B,0xA6,0xBE,0xCA,0x11,0x87,0x76,0x6D,0x7A,0x99,0x81,0x8A,0x0A,0xB7,0x56,0x0A,0x51,0xCA,0x4E,0x9F,0xD7,0x62,0xF7,0x03,0x78,0x54,0x22,0xBE,0x58,0xE3,0xDF,0xE1,0x76,0x3B,0xCC,0x66,0xA6,0x50,0x99,0xED,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x81,0x00,0xA7,0xC1,0x8F,0xBE,0x49,0xBE,0x0D,0x93,0xF3,0x39,0x21,0x28,0x5E,0xD4,0x55,0x78,0x7C,0xF9,0xD6,0x01,0x2C,0xF8,0x51,0x14,0xB0,0x98,0x03,0x5D,0xB0,0xB8,0x6E,0xFF,0x82,0xBF,0x4D,0xDC,0xAA,0xDC,0xFB,0xC7,0xA5,0xD0,0x25,0xA1,0x7B,0x76,0xCC,0x06,0x12,0x6A,0xEF,0x92,0x1E,0x3C,0xD5,0xFF,0xFB,0x9D,0x57,0x89,0x6B,0xD2,0xD6,0x4D,0x32,0xD5,0xB8,0x87,0x39,0x4A,0x01,0xB2,0x52,0x5D,0xFE,0x9E,0xD4,0x2F,0xF9,0x6F,0xBF,0x87,0x40,0x69,0xA1,0x3C,0x99,0xC2,0xA7,0x64,0xCE,0x13,0x81,0x17,0x43,0x58,0x2E,0xBB,0xB5,0x1B,0x61,0x5A,0x3E,0x13,0xD2,0x6B,0x5C,0x75,0x09,0x7A,0x27,0xE9,0x65,0x87,0x27,0x5E,0xD2,0x4E,0x73,0x99,0xD4,0x26,0x31,0x3E,0x1D,0xC7,0x30,0x89,0x02,0x41,0x00,0xF9,0xAE,0xCD,0x66,0x04,0x48,0x14,0xE2,0xF1,0x5A,0xC6,0x63,0x8E,0x81,0x73,0x33,0x44,0x48,0xC5,0x13,0x3F,0xF7,0xB8,0x8D,0xFC,0x39,0x5E,0x0C,0x31,0xBB,0x63,0xA2,0xA1,0x61,0xBB,0xF8,0x20,0x8A,0x45,0x42,0x1C,0xA4,0x68,0xAA,0x4B,0xD0,0x51,0x7A,0x17,0x79,0x7B,0x26,0xC4,0x92,0x6D,0x9F,0x34,0xA4,0x49,0x51,0x58,0x32,0xC7,0x93,0x02,0x41,0x00,0xD8,0x73,0xBF,0x61,0x6F,0xF6,0xAC,0xBC,0x5A,0x1B,0xF2,0x73,0xF3,0xA8,0x8A,0xC2,0x62,0xA2,0xF7,0x31,0xA5,0x04,0x35,0xEC,0xFC,0x8E,0xFB,0xF7,0xDF,0xAF,0x6C,0x2C,0x23,0xC5,0x1B,0xDD,0x5E,0x58,0x85,0xEE,0xCB,0x1E,0xCE,0x36,0xE0,0x0E,0xDE,0x94,0xA5,0xDB,0xA9,0xB2,0x36,0xD8,0x3E,0xC5,0x36,0x37,0x80,0x63,0x4D,0x71,0x08,0x7F,0x02,0x40,0x23,0x38,0xBA,0x76,0xE2,0xB1,0xBC,0x68,0x8B,0x3D,0x8F,0xF0,0xE9,0x60,0x6F,0x7C,0xD2,0xEC,0x25,0x08,0xE3,0x24,0x31,0xDF,0xAD,0xAD,0xF6,0x0B,0x68,0x54,0x93,0xE8,0x94,0x35,0x72,0x4B,0xBD,0x63,0x64,0x03,0xC0,0x80,0x9C,0xD7,0x31,0x1C,0xB0,0xF1,0xB5,0x30,0x08,0xE4,0x5E,0x24,0x7D,0xDC,0x50,0x93,0xC0,0x57,0xFE,0x46,0x23,0x8B,0x02,0x41,0x00,0xA2,0x17,0x9B,0xFC,0x25,0xD2,0x7E,0x6C,0xD6,0xB6,0x13,0x0C,0xCE,0x2D,0x2B,0x2C,0x82,0x9D,0x33,0xAC,0x93,0xBC,0xE1,0x7D,0x45,0x6C,0xF6,0x38,0x1B,0xE4,0xCC,0x87,0x09,0x8A,0x74,0x61,0x84,0x63,0x9A,0x78,0xC6,0xD7,0x9C,0xE9,0xEF,0x44,0x73,0x5E,0xB2,0x0E,0x1B,0xB8,0x7F,0xE5,0xD4,0xAB,0xEE,0xFC,0x05,0x43,0x58,0x1D,0x0B,0x95,0x02,0x40,0x35,0x75,0xDF,0xCD,0x14,0xC6,0xAD,0xF6,0x72,0xE9,0x46,0x09,0x91,0xA6,0x68,0xFB,0xEE,0x9E,0x3A,0xAD,0x31,0x3C,0xBB,0xF6,0x2D,0x86,0x6F,0xED,0x67,0x58,0x36,0x58,0xD9,0x01,0x1E,0x4E,0x9B,0x18,0xD0,0x64,0x9F,0x3B,0xD6,0x66,0x8F,0x4C,0xD8,0x10,0x50,0xFB,0xE0,0xC0,0x07,0xB4,0x3D,0x5C,0xD5,0xA5,0x2E,0x56,0x6C,0xE4,0xAA,0xE5 };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs8KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertNotNil(privateKey.version,@"Version should not be nil.");
    XCTAssertNotNil(privateKey.modulus,@"Modulus should not be nil.");
    XCTAssertNotNil(privateKey.publicExponent,@"Public exponent should not be nil.");
    XCTAssertNotNil(privateKey.privateExponent,@"Private exponent should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime1,@"CRT Prime 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtPrime2,@"CRT Prime 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent1,@"CRT Exponent 1 should not be nil.");
    XCTAssertNotNil(privateKey.crtExponent2,@"CRT Exponent 2 should not be nil.");
    XCTAssertNotNil(privateKey.crtCoefficient,@"CRT Coefficient should not be nil.");
}

-(void)testInitWithModulus {
    uint8_t modulusDataArray[] = { 0x00,0xCD,0x85,0xBE,0xB0,0xF8,0x45,0x2D,0xD7,0xCF,0x02,0x87,0x10,0x28,0xE0,0x94,0x8D,0x94,0x97,0xD4,0x4B,0x66,0xEF,0x6F,0xF0,0x09,0xCC,0xBC,0x40,0x17,0x32,0xBB,0x2E,0xE7,0x48,0xE4,0x12,0x8C,0x93,0x0A,0x47,0xF0,0xA7,0xFB,0x2A,0x69,0xCB,0xF5,0x6F,0x48,0x0A,0x1E,0xBE,0x73,0xEE,0xC6,0xB4,0x18,0xC0,0x2C,0xAD,0x99,0x27,0x40,0x77,0x66,0x6A,0xA9,0xF8,0xF9,0x8C,0xE2,0x0B,0xF2,0x08,0xDB,0x0F,0xBB,0xAA,0x42,0xA6,0x57,0xA7,0x59,0x73,0xB4,0xE8,0x23,0x7D,0x50,0x23,0x87,0x74,0x3F,0x1F,0xCC,0x65,0xAA,0xA2,0xC4,0x9D,0xE0,0xCE,0x72,0x1D,0x90,0x67,0xE7,0x87,0xAA,0xC2,0xEC,0xE2,0x3B,0xF8,0x02,0xAF,0x14,0x40,0xC8,0xDC,0x0D,0x17,0xCE,0x10,0xEE,0xA0,0xD5,0x8B };
    NSData *modulusData = [NSData dataWithBytes:modulusDataArray length:sizeof(modulusDataArray) / sizeof(uint8_t)];
    
    uint8_t publicExponentDataArray[] = { 0x01,0x00,0x01 };
    NSData *publicExponentData = [NSData dataWithBytes:publicExponentDataArray length:sizeof(publicExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t privateExponentDataArray[] = { 0x00,0xA9,0x2F,0x96,0x81,0x1C,0x7F,0xE6,0x73,0x27,0x88,0x8F,0x22,0xF0,0x63,0xA0,0x26,0xC4,0xD2,0x10,0x03,0x5A,0x63,0x75,0x24,0x87,0x0C,0xB1,0x53,0x99,0x45,0x3B,0xEE,0x2A,0x9B,0x48,0x95,0x34,0x7F,0xBF,0x10,0xE5,0xBD,0x82,0xF7,0xB1,0x4C,0x23,0x69,0x4E,0x46,0x76,0x74,0x95,0xFF,0x54,0x37,0xE1,0xC0,0x21,0x87,0x6E,0xF2,0x6F,0x0F,0x74,0x48,0xEA,0xB7,0x7A,0x69,0xDC,0x88,0x1B,0xE7,0xBB,0x2A,0xE6,0x7F,0x52,0x8A,0xBD,0xB4,0xC0,0xBA,0x42,0xEE,0xB4,0x8F,0xF7,0xA8,0x47,0xEE,0x12,0xF9,0x4F,0xF2,0xE6,0x32,0x7F,0xA9,0xE5,0xAD,0x3A,0xD6,0xBF,0x06,0xE6,0x3D,0x2C,0xD1,0x0D,0x93,0x71,0xE4,0xED,0xA1,0xAB,0x90,0x89,0x92,0x4E,0x4D,0x05,0x55,0x7D,0x96,0x39,0x71 };
    NSData *privateExponentData = [NSData dataWithBytes:privateExponentDataArray length:sizeof(privateExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t crtPrime1DataArray[] = { 0x01,0xE3,0x00,0x6D,0xF9,0x3E,0x5F,0xB6,0xE8,0x00,0xFC,0x74,0x1F,0x80,0x3D,0x3D,0xCF,0xAF,0xAD,0x85,0xA7,0x6E,0xEF,0xDD,0x80,0x9E,0x21,0x9D,0xB7,0x29,0xCF,0xAB,0x3F,0x9C,0x4D,0x84,0x45,0x2E,0xE9,0x43,0x18,0xDB,0xAD,0x86,0x79,0xFF,0xDF,0xAF,0xBE,0xC1,0x73,0x3E,0xCA,0xB0,0x28,0xA9,0xB9,0x3D,0x98,0xE8,0x44,0xA5,0x1F,0x54,0xD7 };
    NSData *crtPrime1Data = [NSData dataWithBytes:crtPrime1DataArray length:sizeof(crtPrime1DataArray) / sizeof(uint8_t)];
    
    uint8_t crtPrime2DataArray[] = { 0x6C,0xEE,0x46,0xF7,0xC3,0x72,0x12,0xA7,0xD8,0x42,0xB8,0x24,0xC5,0x97,0xF7,0x88,0x68,0x5F,0xDF,0xC7,0x82,0xC4,0xF6,0x3F,0x25,0x29,0x45,0x69,0xB4,0xFA,0xEE,0x53,0xC7,0x87,0x6A,0xE6,0x21,0xAA,0x91,0xBE,0xEA,0x48,0x87,0x20,0xC4,0x34,0xE4,0x27,0xCC,0x96,0xB4,0x3D,0x67,0x6F,0x0E,0x7C,0x6D,0x80,0x9B,0x8D,0x9E,0x57,0x3A,0x6D };
    NSData *crtPrime2Data = [NSData dataWithBytes:crtPrime2DataArray length:sizeof(crtPrime2DataArray) / sizeof(uint8_t)];
    
    uint8_t crtExponent1DataArray[] = { 0x00,0xF4,0x2C,0x24,0x6C,0x6B,0x2E,0xE1,0xFD,0x79,0x7A,0x26,0x8E,0x42,0x3B,0x33,0x83,0x49,0xD1,0x94,0x0E,0xA7,0xD3,0x95,0x0B,0xCF,0x65,0x39,0x20,0xFE,0x7F,0x20,0x98,0x80,0xC0,0xE3,0x4C,0x42,0x41,0xE4,0x0C,0xAE,0x09,0x94,0x41,0x1A,0xAC,0x8F,0x61,0x04,0xD4,0xE8,0xFA,0x78,0x81,0xA6,0x03,0xA2,0x73,0x29,0x80,0x82,0x65,0x4B,0x73 };
    NSData *crtExponent1Data = [NSData dataWithBytes:crtExponent1DataArray length:sizeof(crtExponent1DataArray) / sizeof(uint8_t)];
    
    uint8_t crtExponent2DataArray[] = { 0x4E,0xA2,0x2F,0x2E,0xB9,0xB2,0xC6,0x0E,0xCD,0xC9,0x53,0xFE,0x8F,0x78,0xE5,0x22,0x5E,0x1E,0x1F,0x7F,0x79,0x41,0xCF,0x74,0xC3,0xD1,0xA8,0x1E,0xE7,0x9B,0x60,0xA1,0xAF,0xDE,0x6C,0x67,0x96,0x13,0xF8,0x43,0xF6,0x01,0xC7,0x31,0xFB,0x11,0x27,0x46,0x27,0xA4,0xFE,0x95,0x78,0xEE,0x2D,0x69,0xDA,0xEE,0x44,0xDC,0x15,0x5A,0x68,0x7D };
    NSData *crtExponent2Data = [NSData dataWithBytes:crtExponent2DataArray length:sizeof(crtExponent2DataArray) / sizeof(uint8_t)];
    
    uint8_t crtCoefficientDataArray[] = { 0x01,0xC9,0xD7,0x89,0x1B,0xFA,0x62,0xFA,0xF6,0x79,0xBE,0x5E,0x3C,0x53,0x8E,0xFB,0x94,0x4F,0x4E,0x99,0xAD,0x8A,0xB1,0x12,0x50,0x0C,0x21,0x72,0xE8,0xDD,0xF3,0x8D,0x36,0x6D,0x09,0x91,0xBA,0x4B,0x7C,0x12,0x1A,0x42,0x4A,0xAC,0xE3,0x05,0xD7,0x89,0x0F,0x9E,0xA7,0x9D,0x65,0xCF,0x40,0x98,0x4F,0xE5,0xF1,0x4A,0xBF,0x88,0xA0,0x22,0xB1 };
    NSData *crtCoefficientData = [NSData dataWithBytes:crtCoefficientDataArray length:sizeof(crtCoefficientDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithModulus:modulusData publicExponent:publicExponentData privateExponent:privateExponentData crtPrime1:crtPrime1Data crtPrime2:crtPrime2Data crtExponent1:crtExponent1Data crtExponent2:crtExponent2Data crtCoefficient:crtCoefficientData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    XCTAssertTrue([privateKey.modulus isEqualToData:modulusData],@"Modulus is incorrect.");
    XCTAssertTrue([privateKey.publicExponent isEqualToData:publicExponentData],@"Public exponent is incorrect.");
    XCTAssertTrue([privateKey.privateExponent isEqualToData:privateExponentData],@"Private exponent is incorrect.");
    XCTAssertTrue([privateKey.crtPrime1 isEqualToData:crtPrime1Data],@"CRT prime 1 is incorrect.");
    XCTAssertTrue([privateKey.crtPrime2 isEqualToData:crtPrime2Data],@"CRT prime 2 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent1 isEqualToData:crtExponent1Data],@"CRT exponent 1 is incorrect.");
    XCTAssertTrue([privateKey.crtExponent2 isEqualToData:crtExponent2Data],@"CRT exponent 2 is incorrect.");
    XCTAssertTrue([privateKey.crtCoefficient isEqualToData:crtCoefficientData],@"CRT coefficient is incorrect.");
}

-(void)testConvertToPkcs1Format_FromPkcs1Data {
    //Initialise with PKCS#1 data, and then convert to PKCS#1 data.  Data elements should be the same
    
    //Manual key data from Bouncy Castle
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x5B,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0x95,0x65,0xC9,0xBC,0xB8,0xC1,0xEC,0x9A,0xA7,0x1B,0x3B,0x54,0x84,0x30,0x0A,0x8A,0xF1,0xBC,0x78,0x28,0x4C,0x90,0xCB,0xCD,0x61,0x8D,0x38,0xAD,0xEA,0xC3,0xA3,0x4B,0x42,0x89,0xD6,0x65,0x1B,0xF7,0x1C,0x07,0xE9,0x16,0x82,0x1A,0x59,0x8A,0x64,0xC1,0x1F,0x6E,0x3B,0xAB,0x58,0x3A,0xDA,0x04,0xB2,0xA4,0x97,0x4C,0xEE,0x54,0xAE,0xBB,0xEF,0xF5,0xE1,0x9D,0x66,0x82,0x07,0x8C,0x41,0x6C,0xC2,0x30,0x42,0x2A,0xE2,0xD2,0x38,0x32,0x84,0x63,0xCA,0x4A,0xF4,0xF9,0xE8,0x8D,0xBE,0xE5,0x18,0x84,0xC2,0xD0,0x97,0x8E,0xD5,0x4F,0x61,0x73,0x77,0xD4,0x0E,0x1C,0xD2,0x4D,0x2A,0x34,0xCF,0xFA,0x17,0x21,0x04,0xDE,0xF7,0xE3,0x32,0x55,0xDF,0xAB,0x31,0x44,0xD6,0xAE,0x6D,0xA3,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x80,0x24,0x94,0xA2,0xDB,0xF9,0xE5,0x49,0xF8,0xE8,0x37,0xEB,0xC4,0x1B,0x05,0xE4,0x5E,0xF7,0x27,0xED,0xC7,0xF8,0x4F,0x70,0x07,0x9E,0xFE,0x44,0x45,0x99,0x79,0x43,0xCF,0x96,0xC0,0x47,0x65,0xC4,0x7E,0x32,0x37,0xE1,0xA3,0xE8,0x41,0x69,0x71,0x50,0x90,0x55,0x10,0xD9,0xBD,0x6F,0xC2,0x21,0x46,0x0B,0x33,0xEF,0xF4,0x1F,0x5B,0x4E,0xD9,0x47,0x60,0x4D,0xA1,0x67,0xCD,0x82,0xB2,0xA2,0xFE,0x0E,0xF7,0x1D,0x8B,0xD8,0xC8,0xCB,0xE6,0xC7,0x9C,0x53,0xFF,0x82,0x94,0x70,0xF1,0x22,0x2B,0x21,0x88,0xDA,0xD0,0xB4,0x08,0x0F,0x16,0x65,0xDF,0x3A,0x1E,0x45,0x64,0x2C,0xB6,0x51,0xFD,0x49,0xC9,0x4F,0xD4,0x28,0xF7,0x46,0x06,0xFC,0xBA,0x99,0x5D,0x0B,0x01,0x36,0x39,0xCA,0x49,0x02,0x41,0x00,0xDA,0x8C,0xF1,0x6C,0x17,0x0A,0x5E,0x32,0xCD,0x31,0xE8,0xE3,0x05,0x61,0x61,0x65,0x89,0xC8,0x70,0x67,0xAD,0x0D,0x1E,0x13,0xF2,0x88,0x25,0xE4,0x3E,0xDD,0xB0,0x76,0xE5,0x5C,0x31,0xB0,0x62,0xD0,0x8B,0xC9,0xF0,0x9F,0xE2,0x26,0x33,0x81,0x9B,0x0F,0x90,0x84,0xA8,0x42,0x99,0x81,0x60,0x8D,0x9B,0x7A,0xAB,0x87,0x3E,0xEE,0x68,0x97,0x02,0x41,0x00,0xAE,0xFF,0x58,0x25,0xDD,0x77,0xB7,0xA4,0x1E,0xA1,0x55,0x1C,0x79,0xFB,0xE5,0x70,0xC1,0x1E,0x42,0xB5,0xB8,0x22,0x16,0x74,0xD4,0x39,0x54,0xF9,0x94,0x8F,0x4F,0xD7,0x3F,0xED,0xE5,0x2A,0x4C,0x51,0x77,0x28,0xAC,0x5B,0x73,0x68,0x1E,0xFC,0xE9,0xED,0x42,0x8C,0x13,0xAE,0x9E,0x82,0x72,0x90,0x8A,0x63,0x99,0x37,0x1E,0xBE,0xD8,0xD5,0x02,0x40,0x18,0x38,0x6C,0x7C,0xFD,0x24,0xB2,0x01,0xD1,0x49,0xC9,0xB4,0x77,0x21,0x2E,0xA9,0x11,0x16,0xFC,0x96,0x10,0xD0,0x96,0x57,0xC1,0x96,0x23,0x14,0xE3,0x7E,0xB0,0x12,0xCD,0x22,0x65,0x83,0x55,0xC0,0x24,0xED,0xD1,0x53,0xF6,0xBD,0x23,0x12,0x26,0xFC,0x17,0x99,0x0C,0x08,0xAD,0x78,0x70,0x19,0xE1,0x74,0x3B,0xD4,0x36,0x3E,0x37,0xAB,0x02,0x40,0x55,0xA6,0x4C,0x32,0x5C,0x2E,0xD8,0x06,0xCF,0xA7,0x0E,0xCD,0x1D,0x37,0x18,0x99,0x13,0x2C,0x08,0x62,0x80,0x78,0xCE,0x9C,0xE7,0xB2,0x17,0xD0,0xFF,0xD1,0x14,0xB6,0xB9,0x67,0x6A,0x1E,0x45,0xB4,0x29,0xAA,0x12,0x91,0xBF,0xEE,0x5A,0x1C,0x57,0x31,0xF4,0xBC,0x32,0x75,0xE8,0xC6,0xD7,0xE3,0xBE,0x97,0xF8,0xC9,0x6D,0x96,0xE2,0xF1,0x02,0x40,0x09,0x8A,0x43,0x0E,0x23,0xCF,0xC8,0x0E,0xB5,0x50,0x70,0x80,0x33,0x8F,0x26,0xFC,0x0C,0x4A,0x63,0x38,0xAE,0x4A,0x53,0x6E,0xCF,0xC9,0x4E,0x17,0x38,0x36,0x83,0x09,0x81,0xA1,0x0E,0xA7,0xBE,0xFC,0xD2,0x7B,0x00,0x5F,0x3F,0x55,0x10,0x5B,0xDA,0xCC,0x5F,0x7F,0x73,0x1F,0xF6,0xB8,0xF4,0xC9,0x97,0x32,0x0E,0x3A,0x5E,0x49,0x46,0x68 };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs1KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    
    NSData *pkcs1Data = [privateKey convertToPkcs1Format];
    XCTAssertNotNil(pkcs1Data,@"PKCS#1 data should not be nil.");
    XCTAssertTrue([pkcs1Data isEqualToData:keyData],@"PKCS#1 data is incorrect.");
}

-(void)testConvertToPkcs1Format_FromKeyComponents {
    //Initialise with key components and then convert to PKCS#1 data.
    uint8_t modulusDataArray[] = { 0x00,0xCD,0x85,0xBE,0xB0,0xF8,0x45,0x2D,0xD7,0xCF,0x02,0x87,0x10,0x28,0xE0,0x94,0x8D,0x94,0x97,0xD4,0x4B,0x66,0xEF,0x6F,0xF0,0x09,0xCC,0xBC,0x40,0x17,0x32,0xBB,0x2E,0xE7,0x48,0xE4,0x12,0x8C,0x93,0x0A,0x47,0xF0,0xA7,0xFB,0x2A,0x69,0xCB,0xF5,0x6F,0x48,0x0A,0x1E,0xBE,0x73,0xEE,0xC6,0xB4,0x18,0xC0,0x2C,0xAD,0x99,0x27,0x40,0x77,0x66,0x6A,0xA9,0xF8,0xF9,0x8C,0xE2,0x0B,0xF2,0x08,0xDB,0x0F,0xBB,0xAA,0x42,0xA6,0x57,0xA7,0x59,0x73,0xB4,0xE8,0x23,0x7D,0x50,0x23,0x87,0x74,0x3F,0x1F,0xCC,0x65,0xAA,0xA2,0xC4,0x9D,0xE0,0xCE,0x72,0x1D,0x90,0x67,0xE7,0x87,0xAA,0xC2,0xEC,0xE2,0x3B,0xF8,0x02,0xAF,0x14,0x40,0xC8,0xDC,0x0D,0x17,0xCE,0x10,0xEE,0xA0,0xD5,0x8B };
    NSData *modulusData = [NSData dataWithBytes:modulusDataArray length:sizeof(modulusDataArray) / sizeof(uint8_t)];
    
    uint8_t publicExponentDataArray[] = { 0x01,0x00,0x01 };
    NSData *publicExponentData = [NSData dataWithBytes:publicExponentDataArray length:sizeof(publicExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t privateExponentDataArray[] = { 0x00,0xA9,0x2F,0x96,0x81,0x1C,0x7F,0xE6,0x73,0x27,0x88,0x8F,0x22,0xF0,0x63,0xA0,0x26,0xC4,0xD2,0x10,0x03,0x5A,0x63,0x75,0x24,0x87,0x0C,0xB1,0x53,0x99,0x45,0x3B,0xEE,0x2A,0x9B,0x48,0x95,0x34,0x7F,0xBF,0x10,0xE5,0xBD,0x82,0xF7,0xB1,0x4C,0x23,0x69,0x4E,0x46,0x76,0x74,0x95,0xFF,0x54,0x37,0xE1,0xC0,0x21,0x87,0x6E,0xF2,0x6F,0x0F,0x74,0x48,0xEA,0xB7,0x7A,0x69,0xDC,0x88,0x1B,0xE7,0xBB,0x2A,0xE6,0x7F,0x52,0x8A,0xBD,0xB4,0xC0,0xBA,0x42,0xEE,0xB4,0x8F,0xF7,0xA8,0x47,0xEE,0x12,0xF9,0x4F,0xF2,0xE6,0x32,0x7F,0xA9,0xE5,0xAD,0x3A,0xD6,0xBF,0x06,0xE6,0x3D,0x2C,0xD1,0x0D,0x93,0x71,0xE4,0xED,0xA1,0xAB,0x90,0x89,0x92,0x4E,0x4D,0x05,0x55,0x7D,0x96,0x39,0x71 };
    NSData *privateExponentData = [NSData dataWithBytes:privateExponentDataArray length:sizeof(privateExponentDataArray) / sizeof(uint8_t)];
    
    uint8_t crtPrime1DataArray[] = { 0x01,0xE3,0x00,0x6D,0xF9,0x3E,0x5F,0xB6,0xE8,0x00,0xFC,0x74,0x1F,0x80,0x3D,0x3D,0xCF,0xAF,0xAD,0x85,0xA7,0x6E,0xEF,0xDD,0x80,0x9E,0x21,0x9D,0xB7,0x29,0xCF,0xAB,0x3F,0x9C,0x4D,0x84,0x45,0x2E,0xE9,0x43,0x18,0xDB,0xAD,0x86,0x79,0xFF,0xDF,0xAF,0xBE,0xC1,0x73,0x3E,0xCA,0xB0,0x28,0xA9,0xB9,0x3D,0x98,0xE8,0x44,0xA5,0x1F,0x54,0xD7 };
    NSData *crtPrime1Data = [NSData dataWithBytes:crtPrime1DataArray length:sizeof(crtPrime1DataArray) / sizeof(uint8_t)];
    
    uint8_t crtPrime2DataArray[] = { 0x6C,0xEE,0x46,0xF7,0xC3,0x72,0x12,0xA7,0xD8,0x42,0xB8,0x24,0xC5,0x97,0xF7,0x88,0x68,0x5F,0xDF,0xC7,0x82,0xC4,0xF6,0x3F,0x25,0x29,0x45,0x69,0xB4,0xFA,0xEE,0x53,0xC7,0x87,0x6A,0xE6,0x21,0xAA,0x91,0xBE,0xEA,0x48,0x87,0x20,0xC4,0x34,0xE4,0x27,0xCC,0x96,0xB4,0x3D,0x67,0x6F,0x0E,0x7C,0x6D,0x80,0x9B,0x8D,0x9E,0x57,0x3A,0x6D };
    NSData *crtPrime2Data = [NSData dataWithBytes:crtPrime2DataArray length:sizeof(crtPrime2DataArray) / sizeof(uint8_t)];
    
    uint8_t crtExponent1DataArray[] = { 0x00,0xF4,0x2C,0x24,0x6C,0x6B,0x2E,0xE1,0xFD,0x79,0x7A,0x26,0x8E,0x42,0x3B,0x33,0x83,0x49,0xD1,0x94,0x0E,0xA7,0xD3,0x95,0x0B,0xCF,0x65,0x39,0x20,0xFE,0x7F,0x20,0x98,0x80,0xC0,0xE3,0x4C,0x42,0x41,0xE4,0x0C,0xAE,0x09,0x94,0x41,0x1A,0xAC,0x8F,0x61,0x04,0xD4,0xE8,0xFA,0x78,0x81,0xA6,0x03,0xA2,0x73,0x29,0x80,0x82,0x65,0x4B,0x73 };
    NSData *crtExponent1Data = [NSData dataWithBytes:crtExponent1DataArray length:sizeof(crtExponent1DataArray) / sizeof(uint8_t)];
    
    uint8_t crtExponent2DataArray[] = { 0x4E,0xA2,0x2F,0x2E,0xB9,0xB2,0xC6,0x0E,0xCD,0xC9,0x53,0xFE,0x8F,0x78,0xE5,0x22,0x5E,0x1E,0x1F,0x7F,0x79,0x41,0xCF,0x74,0xC3,0xD1,0xA8,0x1E,0xE7,0x9B,0x60,0xA1,0xAF,0xDE,0x6C,0x67,0x96,0x13,0xF8,0x43,0xF6,0x01,0xC7,0x31,0xFB,0x11,0x27,0x46,0x27,0xA4,0xFE,0x95,0x78,0xEE,0x2D,0x69,0xDA,0xEE,0x44,0xDC,0x15,0x5A,0x68,0x7D };
    NSData *crtExponent2Data = [NSData dataWithBytes:crtExponent2DataArray length:sizeof(crtExponent2DataArray) / sizeof(uint8_t)];
    
    uint8_t crtCoefficientDataArray[] = { 0x01,0xC9,0xD7,0x89,0x1B,0xFA,0x62,0xFA,0xF6,0x79,0xBE,0x5E,0x3C,0x53,0x8E,0xFB,0x94,0x4F,0x4E,0x99,0xAD,0x8A,0xB1,0x12,0x50,0x0C,0x21,0x72,0xE8,0xDD,0xF3,0x8D,0x36,0x6D,0x09,0x91,0xBA,0x4B,0x7C,0x12,0x1A,0x42,0x4A,0xAC,0xE3,0x05,0xD7,0x89,0x0F,0x9E,0xA7,0x9D,0x65,0xCF,0x40,0x98,0x4F,0xE5,0xF1,0x4A,0xBF,0x88,0xA0,0x22,0xB1 };
    NSData *crtCoefficientData = [NSData dataWithBytes:crtCoefficientDataArray length:sizeof(crtCoefficientDataArray) / sizeof(uint8_t)];
    
    uint8_t expectedPkcs1DataArray[] = { 0x30,0x82,0x02,0x5D,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0xCD,0x85,0xBE,0xB0,0xF8,0x45,0x2D,0xD7,0xCF,0x02,0x87,0x10,0x28,0xE0,0x94,0x8D,0x94,0x97,0xD4,0x4B,0x66,0xEF,0x6F,0xF0,0x09,0xCC,0xBC,0x40,0x17,0x32,0xBB,0x2E,0xE7,0x48,0xE4,0x12,0x8C,0x93,0x0A,0x47,0xF0,0xA7,0xFB,0x2A,0x69,0xCB,0xF5,0x6F,0x48,0x0A,0x1E,0xBE,0x73,0xEE,0xC6,0xB4,0x18,0xC0,0x2C,0xAD,0x99,0x27,0x40,0x77,0x66,0x6A,0xA9,0xF8,0xF9,0x8C,0xE2,0x0B,0xF2,0x08,0xDB,0x0F,0xBB,0xAA,0x42,0xA6,0x57,0xA7,0x59,0x73,0xB4,0xE8,0x23,0x7D,0x50,0x23,0x87,0x74,0x3F,0x1F,0xCC,0x65,0xAA,0xA2,0xC4,0x9D,0xE0,0xCE,0x72,0x1D,0x90,0x67,0xE7,0x87,0xAA,0xC2,0xEC,0xE2,0x3B,0xF8,0x02,0xAF,0x14,0x40,0xC8,0xDC,0x0D,0x17,0xCE,0x10,0xEE,0xA0,0xD5,0x8B,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x81,0x00,0xA9,0x2F,0x96,0x81,0x1C,0x7F,0xE6,0x73,0x27,0x88,0x8F,0x22,0xF0,0x63,0xA0,0x26,0xC4,0xD2,0x10,0x03,0x5A,0x63,0x75,0x24,0x87,0x0C,0xB1,0x53,0x99,0x45,0x3B,0xEE,0x2A,0x9B,0x48,0x95,0x34,0x7F,0xBF,0x10,0xE5,0xBD,0x82,0xF7,0xB1,0x4C,0x23,0x69,0x4E,0x46,0x76,0x74,0x95,0xFF,0x54,0x37,0xE1,0xC0,0x21,0x87,0x6E,0xF2,0x6F,0x0F,0x74,0x48,0xEA,0xB7,0x7A,0x69,0xDC,0x88,0x1B,0xE7,0xBB,0x2A,0xE6,0x7F,0x52,0x8A,0xBD,0xB4,0xC0,0xBA,0x42,0xEE,0xB4,0x8F,0xF7,0xA8,0x47,0xEE,0x12,0xF9,0x4F,0xF2,0xE6,0x32,0x7F,0xA9,0xE5,0xAD,0x3A,0xD6,0xBF,0x06,0xE6,0x3D,0x2C,0xD1,0x0D,0x93,0x71,0xE4,0xED,0xA1,0xAB,0x90,0x89,0x92,0x4E,0x4D,0x05,0x55,0x7D,0x96,0x39,0x71,0x02,0x41,0x01,0xE3,0x00,0x6D,0xF9,0x3E,0x5F,0xB6,0xE8,0x00,0xFC,0x74,0x1F,0x80,0x3D,0x3D,0xCF,0xAF,0xAD,0x85,0xA7,0x6E,0xEF,0xDD,0x80,0x9E,0x21,0x9D,0xB7,0x29,0xCF,0xAB,0x3F,0x9C,0x4D,0x84,0x45,0x2E,0xE9,0x43,0x18,0xDB,0xAD,0x86,0x79,0xFF,0xDF,0xAF,0xBE,0xC1,0x73,0x3E,0xCA,0xB0,0x28,0xA9,0xB9,0x3D,0x98,0xE8,0x44,0xA5,0x1F,0x54,0xD7,0x02,0x40,0x6C,0xEE,0x46,0xF7,0xC3,0x72,0x12,0xA7,0xD8,0x42,0xB8,0x24,0xC5,0x97,0xF7,0x88,0x68,0x5F,0xDF,0xC7,0x82,0xC4,0xF6,0x3F,0x25,0x29,0x45,0x69,0xB4,0xFA,0xEE,0x53,0xC7,0x87,0x6A,0xE6,0x21,0xAA,0x91,0xBE,0xEA,0x48,0x87,0x20,0xC4,0x34,0xE4,0x27,0xCC,0x96,0xB4,0x3D,0x67,0x6F,0x0E,0x7C,0x6D,0x80,0x9B,0x8D,0x9E,0x57,0x3A,0x6D,0x02,0x41,0x00,0xF4,0x2C,0x24,0x6C,0x6B,0x2E,0xE1,0xFD,0x79,0x7A,0x26,0x8E,0x42,0x3B,0x33,0x83,0x49,0xD1,0x94,0x0E,0xA7,0xD3,0x95,0x0B,0xCF,0x65,0x39,0x20,0xFE,0x7F,0x20,0x98,0x80,0xC0,0xE3,0x4C,0x42,0x41,0xE4,0x0C,0xAE,0x09,0x94,0x41,0x1A,0xAC,0x8F,0x61,0x04,0xD4,0xE8,0xFA,0x78,0x81,0xA6,0x03,0xA2,0x73,0x29,0x80,0x82,0x65,0x4B,0x73,0x02,0x40,0x4E,0xA2,0x2F,0x2E,0xB9,0xB2,0xC6,0x0E,0xCD,0xC9,0x53,0xFE,0x8F,0x78,0xE5,0x22,0x5E,0x1E,0x1F,0x7F,0x79,0x41,0xCF,0x74,0xC3,0xD1,0xA8,0x1E,0xE7,0x9B,0x60,0xA1,0xAF,0xDE,0x6C,0x67,0x96,0x13,0xF8,0x43,0xF6,0x01,0xC7,0x31,0xFB,0x11,0x27,0x46,0x27,0xA4,0xFE,0x95,0x78,0xEE,0x2D,0x69,0xDA,0xEE,0x44,0xDC,0x15,0x5A,0x68,0x7D,0x02,0x41,0x01,0xC9,0xD7,0x89,0x1B,0xFA,0x62,0xFA,0xF6,0x79,0xBE,0x5E,0x3C,0x53,0x8E,0xFB,0x94,0x4F,0x4E,0x99,0xAD,0x8A,0xB1,0x12,0x50,0x0C,0x21,0x72,0xE8,0xDD,0xF3,0x8D,0x36,0x6D,0x09,0x91,0xBA,0x4B,0x7C,0x12,0x1A,0x42,0x4A,0xAC,0xE3,0x05,0xD7,0x89,0x0F,0x9E,0xA7,0x9D,0x65,0xCF,0x40,0x98,0x4F,0xE5,0xF1,0x4A,0xBF,0x88,0xA0,0x22,0xB1 };
    NSData *expectedPkcs1Data = [NSData dataWithBytes:expectedPkcs1DataArray length:sizeof(expectedPkcs1DataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithModulus:modulusData publicExponent:publicExponentData privateExponent:privateExponentData crtPrime1:crtPrime1Data crtPrime2:crtPrime2Data crtExponent1:crtExponent1Data crtExponent2:crtExponent2Data crtCoefficient:crtCoefficientData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    
    NSData *pkcs1Data = [privateKey convertToPkcs1Format];
    
    XCTAssertNotNil(pkcs1Data,@"PKCS#1 data should not be nil.");
    XCTAssertTrue([pkcs1Data isEqualToData:expectedPkcs1Data],@"PKCS#1 data is incorrect.");
}

-(void)testConvertToPkcs8Format_FromPkcs8Data {
    //Initialise with PKCS#8 data, and then convert to PKCS#8 data.  Data elements should be the same
    
    uint8_t keyDataArray[] = { 0x30,0x82,0x02,0x77,0x02,0x01,0x00,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,0x04,0x82,0x02,0x61,0x30,0x82,0x02,0x5D,0x02,0x01,0x00,0x02,0x81,0x81,0x00,0xD3,0x1C,0x61,0x7C,0xCC,0x1F,0x10,0x5C,0x06,0xA1,0xB5,0x77,0x34,0xAB,0x99,0x4E,0x1F,0x5F,0xA5,0x0D,0xFC,0x2C,0x4F,0x76,0x5E,0x58,0x7B,0x82,0xB0,0x76,0xEB,0x58,0x0C,0x7F,0xED,0xE3,0xF1,0xD9,0xD3,0xEB,0x48,0x81,0x70,0x04,0x68,0xEC,0x11,0xB8,0x70,0x79,0xEB,0x51,0xE5,0x09,0x82,0x15,0x57,0x93,0x29,0x83,0x0F,0x30,0xD7,0xD3,0x8A,0x48,0x1F,0x57,0x2D,0xB3,0x75,0xC1,0x40,0xB5,0xB2,0x72,0x14,0xF0,0xE8,0xB6,0x69,0x4D,0x70,0x8D,0x4D,0x12,0x02,0x0A,0x8B,0xA6,0xBE,0xCA,0x11,0x87,0x76,0x6D,0x7A,0x99,0x81,0x8A,0x0A,0xB7,0x56,0x0A,0x51,0xCA,0x4E,0x9F,0xD7,0x62,0xF7,0x03,0x78,0x54,0x22,0xBE,0x58,0xE3,0xDF,0xE1,0x76,0x3B,0xCC,0x66,0xA6,0x50,0x99,0xED,0x02,0x03,0x01,0x00,0x01,0x02,0x81,0x81,0x00,0xA7,0xC1,0x8F,0xBE,0x49,0xBE,0x0D,0x93,0xF3,0x39,0x21,0x28,0x5E,0xD4,0x55,0x78,0x7C,0xF9,0xD6,0x01,0x2C,0xF8,0x51,0x14,0xB0,0x98,0x03,0x5D,0xB0,0xB8,0x6E,0xFF,0x82,0xBF,0x4D,0xDC,0xAA,0xDC,0xFB,0xC7,0xA5,0xD0,0x25,0xA1,0x7B,0x76,0xCC,0x06,0x12,0x6A,0xEF,0x92,0x1E,0x3C,0xD5,0xFF,0xFB,0x9D,0x57,0x89,0x6B,0xD2,0xD6,0x4D,0x32,0xD5,0xB8,0x87,0x39,0x4A,0x01,0xB2,0x52,0x5D,0xFE,0x9E,0xD4,0x2F,0xF9,0x6F,0xBF,0x87,0x40,0x69,0xA1,0x3C,0x99,0xC2,0xA7,0x64,0xCE,0x13,0x81,0x17,0x43,0x58,0x2E,0xBB,0xB5,0x1B,0x61,0x5A,0x3E,0x13,0xD2,0x6B,0x5C,0x75,0x09,0x7A,0x27,0xE9,0x65,0x87,0x27,0x5E,0xD2,0x4E,0x73,0x99,0xD4,0x26,0x31,0x3E,0x1D,0xC7,0x30,0x89,0x02,0x41,0x00,0xF9,0xAE,0xCD,0x66,0x04,0x48,0x14,0xE2,0xF1,0x5A,0xC6,0x63,0x8E,0x81,0x73,0x33,0x44,0x48,0xC5,0x13,0x3F,0xF7,0xB8,0x8D,0xFC,0x39,0x5E,0x0C,0x31,0xBB,0x63,0xA2,0xA1,0x61,0xBB,0xF8,0x20,0x8A,0x45,0x42,0x1C,0xA4,0x68,0xAA,0x4B,0xD0,0x51,0x7A,0x17,0x79,0x7B,0x26,0xC4,0x92,0x6D,0x9F,0x34,0xA4,0x49,0x51,0x58,0x32,0xC7,0x93,0x02,0x41,0x00,0xD8,0x73,0xBF,0x61,0x6F,0xF6,0xAC,0xBC,0x5A,0x1B,0xF2,0x73,0xF3,0xA8,0x8A,0xC2,0x62,0xA2,0xF7,0x31,0xA5,0x04,0x35,0xEC,0xFC,0x8E,0xFB,0xF7,0xDF,0xAF,0x6C,0x2C,0x23,0xC5,0x1B,0xDD,0x5E,0x58,0x85,0xEE,0xCB,0x1E,0xCE,0x36,0xE0,0x0E,0xDE,0x94,0xA5,0xDB,0xA9,0xB2,0x36,0xD8,0x3E,0xC5,0x36,0x37,0x80,0x63,0x4D,0x71,0x08,0x7F,0x02,0x40,0x23,0x38,0xBA,0x76,0xE2,0xB1,0xBC,0x68,0x8B,0x3D,0x8F,0xF0,0xE9,0x60,0x6F,0x7C,0xD2,0xEC,0x25,0x08,0xE3,0x24,0x31,0xDF,0xAD,0xAD,0xF6,0x0B,0x68,0x54,0x93,0xE8,0x94,0x35,0x72,0x4B,0xBD,0x63,0x64,0x03,0xC0,0x80,0x9C,0xD7,0x31,0x1C,0xB0,0xF1,0xB5,0x30,0x08,0xE4,0x5E,0x24,0x7D,0xDC,0x50,0x93,0xC0,0x57,0xFE,0x46,0x23,0x8B,0x02,0x41,0x00,0xA2,0x17,0x9B,0xFC,0x25,0xD2,0x7E,0x6C,0xD6,0xB6,0x13,0x0C,0xCE,0x2D,0x2B,0x2C,0x82,0x9D,0x33,0xAC,0x93,0xBC,0xE1,0x7D,0x45,0x6C,0xF6,0x38,0x1B,0xE4,0xCC,0x87,0x09,0x8A,0x74,0x61,0x84,0x63,0x9A,0x78,0xC6,0xD7,0x9C,0xE9,0xEF,0x44,0x73,0x5E,0xB2,0x0E,0x1B,0xB8,0x7F,0xE5,0xD4,0xAB,0xEE,0xFC,0x05,0x43,0x58,0x1D,0x0B,0x95,0x02,0x40,0x35,0x75,0xDF,0xCD,0x14,0xC6,0xAD,0xF6,0x72,0xE9,0x46,0x09,0x91,0xA6,0x68,0xFB,0xEE,0x9E,0x3A,0xAD,0x31,0x3C,0xBB,0xF6,0x2D,0x86,0x6F,0xED,0x67,0x58,0x36,0x58,0xD9,0x01,0x1E,0x4E,0x9B,0x18,0xD0,0x64,0x9F,0x3B,0xD6,0x66,0x8F,0x4C,0xD8,0x10,0x50,0xFB,0xE0,0xC0,0x07,0xB4,0x3D,0x5C,0xD5,0xA5,0x2E,0x56,0x6C,0xE4,0xAA,0xE5 };
    NSData *keyData = [NSData dataWithBytes:keyDataArray length:sizeof(keyDataArray) / sizeof(uint8_t)];
    
    QredoRsaPrivateKey *privateKey = [[QredoRsaPrivateKey alloc] initWithPkcs8KeyData:keyData];
    
    XCTAssertNotNil(privateKey,@"Private key should not be nil.");
    
    NSData *pkcs1Data = [privateKey convertToPkcs8Format];
    XCTAssertNotNil(pkcs1Data,@"PKCS#8 data should not be nil.");
    XCTAssertTrue([pkcs1Data isEqualToData:keyData],@"PKCS#8 data is incorrect.");
}

@end
